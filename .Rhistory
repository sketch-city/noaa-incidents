}
for(current_link in mainattrs$link) {
thirdlink_text <- read_html(current_link) %>%
html_nodes(".mw-content-ltr p") %>% .[[1]] %>% # isolate the first paragraph
html_text() # get the text
string <- paste(thirdlink_text, ";", current_link)
thirdlink_output <- append(thirdlink_output, string)
}
onballot$thirdlink <- as.character(onballot$thirdlink)
for(current_link in onballot$thirdlink) {
thirdlink_text <- read_html(current_link) %>%
html_nodes(".mw-content-ltr p") %>% .[[1]] %>% # isolate the first paragraph
html_text() # get the text
string <- paste(thirdlink_text, ";", current_link)
thirdlink_output <- append(thirdlink_output, string)
}
thirdlink_output <- list()
for(current_link in onballot$thirdlink) {
thirdlink_text <- read_html(current_link) %>% # load the page
html_nodes(".mw-content-ltr p") %>% .[[1]] %>% # isolate the first paragraph
html_text() # get the text
string <- paste(thirdlink_text, ";", current_link)
thirdlink_output <- append(thirdlink_output, string)
}
thirdlink_output <- list()
for(current_link in onballot$thirdlink) {
thirdlink_text <- read_html(current_link) %>% # load the page
html_nodes(".mw-content-ltr") %>% .[[1]] %>% # isolate the first paragraph
html_text() # get the text
string <- paste(thirdlink_text, ";", current_link)
thirdlink_output <- append(thirdlink_output, string)
}
thirdlink_output <- list()
for(current_link in onballot$thirdlink) {
thirdlink_text <- read_html(current_link) %>% # load the page
html_nodes(".mw-content-ltr p") %>% .[[1]] %>% # isolate the first paragraph
html_text() # get the text
string <- paste(thirdlink_text, ";", current_link)
thirdlink_output <- append(thirdlink_output, string)
}
thirdlink_output <- list()
for(current_link in onballot$thirdlink) {
thirdlink_text <- read_html(current_link) %>% # load the page
html_nodes(".mw-body p") %>% .[[1]] %>% # isolate the first paragraph
html_text() # get the text
string <- paste(thirdlink_text, ";", current_link)
thirdlink_output <- append(thirdlink_output, string)
}
thirdlink_output <- list()
for(current_link in onballot$thirdlink) {
thirdlink_text <- read_html(current_link) %>% # load the page
html_nodes(".mw-body") %>% .[[1]] %>% # isolate the first paragraph
html_text() # get the text
string <- paste(thirdlink_text, ";", current_link)
thirdlink_output <- append(thirdlink_output, string)
}
thirdlink_output <- list()
for(current_link in onballot$thirdlink) {
thirdlink_text <- read_html(current_link) %>% # load the page
html_nodes("#bodyContent p") %>% .[[1]] %>% # isolate the first paragraph
html_text() # get the text
string <- paste(thirdlink_text, ";", current_link)
thirdlink_output <- append(thirdlink_output, string)
}
View(secondlink_output)
thirdlink_output <- list()
for(current_link in onballot$thirdlink) {
thirdlink_text <- read_html(current_link) %>% # load the page
html_nodes("#bodyContent p") %>% # isolate the first paragraph
html_text() # get the text
string <- paste(thirdlink_text, ";", current_link)
thirdlink_output <- append(thirdlink_output, string)
}
thirdlink_output <- list()
for(current_link in onballot$thirdlink) {
thirdlink_text <- read_html(current_link) %>% # load the page
html_nodes("#bodyContent p") %>% .[[1]] %>% # isolate the first paragraph
html_text() # get the text
string <- paste(thirdlink_text, ";", current_link)
thirdlink_output <- append(thirdlink_output, string)
}
onballot$thirdlink <- as.character(onballot$thirdlink)
rownames(onballot) <- seq(length=nrow(onballot))
thirdlink_output <- list()
for(current_link in onballot$thirdlink) {
thirdlink_text <- read_html(current_link) %>% # load the page
html_nodes("#bodyContent p") %>% .[[1]] %>% # isolate the first paragraph
html_text() # get the text
string <- paste(thirdlink_text, ";", current_link)
thirdlink_output <- append(thirdlink_output, string)
}
debug
thirdlink_output <- list()
for(current_link in onballot$thirdlink) {
thirdlink_text <- read_html(current_link) %>% # load the page
html_nodes("#bodyContent p") %>% .[[1]] %>% # isolate the first paragraph
html_text() # get the text
string <- paste(thirdlink_text, ";", current_link)
thirdlink_output <- append(thirdlink_output, string)
}
recover()
thirdlink_output <- list()
for(current_link in onballot$thirdlink) {
thirdlink_text <- read_html(current_link) %>% # load the page
html_nodes("#bodyContent p") %>% .[[1]] %>% # isolate the first paragraph
html_text() # get the text
string <- paste(thirdlink_text, ";", current_link)
thirdlink_output <- append(thirdlink_output, string)
}
thirdlink_output <- list()
for(current_link in onballot$thirdlink) {
thirdlink_text <- read_html(current_link) %>% # load the page
html_nodes("#bodyContent p") %>% .[[1]] %>% # isolate the first paragraph
html_text() # get the text
string <- paste(thirdlink_text, ";", current_link)
thirdlink_output <- append(thirdlink_output, string)
}
thirdlink_output <- list()
for(current_link in onballot$thirdlink) {
thirdlink_text <- read_html(current_link) %>% # load the page
html_nodes("#bodyContent p") %>% .[[1]] %>% # isolate the first paragraph
html_text() # get the text
string <- paste(thirdlink_text, ";", current_link)
thirdlink_output <- append(thirdlink_output, string)
}
thirdlink_output <- list()
for(current_link in onballot$thirdlink) {
thirdlink_text <- read_html(current_link) %>% # load the page
html_nodes("#bodyContent p") %>% .[[1]] %>% # isolate the first paragraph
html_text() # get the text
string <- paste(thirdlink_text, ";", current_link)
thirdlink_output <- append(thirdlink_output, string)
}
onballot$thirdlink
onballot$thirdlink <- gsub(" ", "", onballot$thirdlink)
onballot$thirdlink <- gsub(" ", "", onballot$thirdlink)
onballot$thirdlink
thirdlink_output <- list()
for(current_link in onballot$thirdlink) {
thirdlink_text <- read_html(current_link) %>% # load the page
html_nodes("#bodyContent p") %>% .[[1]] %>% # isolate the first paragraph
html_text() # get the text
string <- paste(thirdlink_text, ";", current_link)
thirdlink_output <- append(thirdlink_output, string)
}
thirdlink_output <- as.data.frame(unlist(thirdlink_output))
colnames(thirdlink_output) <- c("raw")
View(thirdlink_output)
thirdlink_processed <- separate(data = thirdlink, col = raw, into = c("text", "link"), sep = ";")
thirdlink_processed <- separate(data = thirdlink_output, col = raw, into = c("text", "link"), sep = ";")
View(thirdlink_processed)
thirdlink_processed$status <- if(grepl("<b>defeated</b>")) print("Defeated") else print("Approved")
?grepl
thirdlink_processed$status <- if(grepl("<b>defeated</b>"), thirdlink_processed$text) print("Defeated") else print("Approved")
thirdlink_processed$status <- if(grepl("<b>defeated</b>") thirdlink_processed$text) print("Defeated") else print("Approved")
thirdlink_processed$status <- ifelse(grepl("<b>defeated</b>",thirdlink_processed$text),"Defeated","Approved")
ifelse(grepl("<b>defeated</b>",thirdlink_processed$text),"Defeated","Approved")
ifelse(grepl("defeated",thirdlink_processed$text),"Defeated","Approved")
thirdlink_output <- list()
for(current_link in onballot$thirdlink) {
thirdlink_text <- read_html(current_link) %>% # load the page
html_nodes("#bodyContent") %>%
html_text() # get the text
string <- paste(thirdlink_text, ";", current_link)
thirdlink_output <- append(thirdlink_output, string)
}
thirdlink_output <- as.data.frame(unlist(thirdlink_output))
colnames(thirdlink_output) <- c("raw")
View(thirdlink_output)
library(leaflet)
library(rgdal)
download.file("https://www.dropbox.com/s/nij2oa2rp7ijaaj/commuter_rail.geojson?dl=1",
method = "auto", mode = "wb", destfile = "commuter_rail.json")
commuterLines <- readOGR("commuter_rail.json",
"OGRGeoJSON")
# Straight R Plot - Looks good
plot(commuterLines)
# Plot using leaflet - Some lines are missing!
leaflet() %>% addPolylines(data = commuterLines)
plot(commuterLines)
leaflet() %>% addPolylines(data = commuterLines)
shiny::runApp('Desktop/TCJC')
shiny::runApp('Desktop/TCJC')
runApp('Desktop/TCJC')
runApp('Desktop/TCJC')
runApp('Desktop/TCJC')
runApp('Desktop/TCJC')
runApp('Desktop/TCJC')
runApp('Desktop/TCJC')
runApp('Desktop/TCJC')
runApp('Desktop/TCJC')
runApp('Desktop/TCJC')
runApp('Desktop/TCJC')
runApp('Desktop/TCJC')
runApp('Desktop/TCJC')
runApp('Desktop/TCJC')
runApp('Desktop/TCJC')
runApp('Desktop/TCJC')
runApp('Desktop/TCJC')
runApp('Desktop/TCJC')
runApp('Desktop/TCJC')
?renderPrint
runApp('Desktop/TCJC')
runApp('Desktop/TCJC')
runApp('Desktop/TCJC')
runApp('Desktop/TCJC')
runApp('Desktop/TCJC')
?rendertext
?renderText
?printOutput
?textOutput
runApp('Desktop/TCJC')
runApp('Desktop/TCJC')
runApp('Desktop/TCJC')
runApp('Desktop/TCJC')
?count
shiny::runApp('Desktop/TCJC')
install.packages("flexdashboard", type = "source")
# Chunk 1: setup
library(flexdashboard)
# Chunk 2
# Chunk 3
# Chunk 4
# Chunk 1: setup
library(flexdashboard)
library(shiny)
library(shinyjs)
library(dplyr)
library(leaflet)
library(RColorBrewer)
library(ggplot2)
library(scales)
library(DT)
raw <- read.csv(file="limited.csv", header=T, stringsAsFactors=F)
raw$fda <- as.Date(raw$fda, format = "%Y-%m-%d")
raw$bam <- as.numeric(raw$bam)
dispositionlist <- unique(raw$disposition)
racelist <- unique(raw$def_rac)
chargelist <- unique(raw$curr_off_lit)
attorneylist <- unique(raw$aty_coc_lit)
agencylist <- unique(raw$comp_agency)
# Chunk 2
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20)
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
# Chunk 3
# Chunk 4
?renderText
runApp('Desktop/TCJC/app-010117-backup.R')
string1 <- "On the Internet, nobody knows I'm a dog"
string2 <- "On the Internet, nobody knows I''m a dog"
gsub("'", "''", string1)
gsub("'", "''", string2)
string1 <- "On the Internet, nobody knows I'm a dog"
string2 <- "On the Internet, nobody knows I''m a dog"
gsub("\\''", "\\'", string2)
string1 <- "On the Internet, nobody knows I'm a dog"
string2 <- "On the Internet, nobody knows I''m a dog"
gsub("\\'\\'", "\\'", string2)
gsub("'", "''", string2)
gsub("\\'\\'", "\\'", string2)
gsub("\\'", "\\'\\'", string2)
df <- data.frame(A = c(1,2,3,4,5,6),
D1 = as.Date(as.character(c("1863-12-01","1945-06-06","1955-03-01","1962-08-01","1980-08-01","1998-12-01")), format = "%Y-%m-%d"),
D2 = as.Date(as.character(c("1923-02-28","1953-05-28","1962-07-31","1978-06-30","1998-11-30","2015-12-31")), format = "%Y-%m-%d"))
df
df[df((D2 - D1) > 1000000 )]
df[df((df$D2 - df$D1) > 1000000 )]
df$D3 <- (df$d2 - df$D1)
observeEvent(input$reset, {
reset("form")
}) # reset form
observeEvent(input$reset, {
reset("form")
}) # reset form
?renderTable
?renderText
url = "http://www.basketball-reference.com/leagues/NBA_2015.html"
teamPageTables = readHTMLTable(url)
library(xml2)
url = "http://www.basketball-reference.com/leagues/NBA_2015.html"
teamPageTables = readHTMLTable(url)
library(XML)
url = "http://www.basketball-reference.com/leagues/NBA_2015.html"
teamPageTables = readHTMLTable(url)
teamPageTables
?readHTMLTables
?readHTMLTable
teamPageTables = readHTMLTable(url, which=8)
teamPageTables = readHTMLTable(url, which=integer(8))
teamPageTables = readHTMLTable(url, which=(8))
teamPageTables = readHTMLTable(url, which=8)
library(rvest)
url = "http://www.basketball-reference.com/leagues/NBA_2015.html"
link <- read_html("http://www.basketball-reference.com/leagues/NBA_2015.html")
misc <- link %>%
html_nodes("table") %>%
html_table() %>%
as.character()
misc
misc <- link %>%
html_nodes("table") %>%
html_table()
misc
misc <- link %>%
html_nodes("table") %>%
html_table(8)
misc
misc <- link %>%
html_nodes("table") %>%
html_table()[8]
misc
misc <- link %>%
html_nodes("table"[8]) %>%
html_table()
misc
misc <- link %>%
html_nodes(//*[@id="misc_stats"]) %>%
html_table()
misc
library(rvest)
link <- read_html("http://www.basketball-reference.com/leagues/NBA_2015.html")
misc <- link %>%
html_nodes(//*[@id="misc_stats"]) %>%
html_table()
misc
misc <- link %>%
html_nodes(xpath='//*[@id="misc_stats"]') %>%
html_table()
misc
misc <- link %>%
html_nodes(xpath='//*[@id="misc_stats"]/table[8]') %>%
html_table()
misc
misc <- link %>%
html() %>%
html_nodes(xpath='//*[@id="misc_stats"]/table[8]') %>%
html_table()
misc
misc <- link %>%
html_nodes(xpath='//*[@id="misc_stats"]/table[8]') %>%
html_table()
misc
misc <- link %>%
html_nodes(xpath='//*[@id="misc_stats"]') %>%
html_table()
misc
?html_table
misc <- link %>%
html_node(xpath='//*[@id="misc_stats"]') %>%
html_table()
misc
misc <- link %>%
html_nodes("table") %>%
.[[8]] %>%
html_table()
misc
link <- read_html("http://www.basketball-reference.com/leagues/NBA_2015.html")
misc <- link %>%
html_nodes("table") %>%
.[[8]] %>%
html_table()
misc
misc <- link %>%
html_nodes("table") %>%
.[[6]] %>%
html_table()
misc
misc <- link %>%
html_nodes("table") %>%
.[[2]] %>%
html_table()
misc
misc <- link %>%
html_nodes("table") %>%
.[[3]] %>%
html_table()
misc
misc <- link %>%
html_nodes("table") %>%
.[[3]] %>%
html_text()
misc <- link %>%
html_nodes("#misc_stats") %>%
html_table()
misc
library(ggmap)
geocode("University of Pennsylvania, pennsylvania")
geocode("Fordham University School of Law,New York")
geocode("George Washington University Law School")
geocode("George Washington University Law School, Washington, DC")
geocode("Brooklyn Law School,New York")
geocode("BYU J. Reuben Clark Law School,Utah")
geocode("Creighton University School of Law,Nebraska")
geocode("creighton university, nebraska")
geocode("Temple University Beasley School of Law,Pennsylvania")
geocode("temple university, pennsylvania")
?spRbind
library(shiny); runApp('Desktop/TCJC/workingscript.r')
library(flexdashboard)
library(shiny)
library(leaflet)
library(dplyr)
library(DT)
library(rgdal)
library(scales)
library(graphics)
certlist <- c("DFPS Licensed", "COH TRS", "NAEYC", "SACS", "NAC", "Early Head Start", "ACSI", "Accredited Member School", "AMI")
governmentboundarieslist <- c("Harris County", "City of Houston", "Elementary School Feeder Patterns", "138% of Federal Poverty Level", "Predominant Race")
library(shiny); runApp('Desktop/TCJC/workingscript.r')
library(dplyr)
setwd("/users/jeffreichman/desktop")
raw <- read.csv(file="ECHO_EXPORTER.csv", header=T)
View(raw)
shiny::runApp('TCJC')
uniques <- unique(raw$CAA_PERMIT_TYPES)
uniques
uniques <- unique(raw$RCRA_PERMIT_TYPES)
uniques
setwd("/users/jeffreichman/desktop/state_combined_tx")
raw <- read.csv(file="TX_FACILITY_FILE.csv", header=T)
View(raw)
library(dplyr)
setwd("/users/jeffreichman/noaa-incidents")
setwd("/users/jeffreichman/noaa-incidents")
diesel <- read.csv(file="diesel.csv", header=T)
fuel <- read.csv(file="fuel.csv", header=T)
oil <- read.csv(file="oil.csv", header=T)
remove(raw)
View(diesel)
library(leaflet)
View(diesel)
noaamap <- leaflet() %>%
addTiles() %>%
addProviderTiles("CartoDB.Positron") %>%
setView(-95.37, 29.75, zoom = 11) %>%
addCircleMarkers(data = diesel, lng = ~ lon, lat = ~ lat, color="blue", radius = ~ sqrt(max_ptl_release_gallons), popup = paste("<strong>",name,"<strong><br/>",description, group="Diesel")) %>%
addCircleMarkers(data = fuel, lng = ~ lon, lat = ~ lat, color="red", radius = ~ sqrt(max_ptl_release_gallons), popup = paste("<strong>",name,"<strong><br/>",description, group="Fuel")) %>%
addCircleMarkers(data = oil, lng = ~ lon, lat = ~ lat, color="green", radius = ~ sqrt(max_ptl_release_gallons), popup = paste("<strong>",name,"<strong><br/>",description, group="Oil")) %>%
addLayersControl(overlayGroups = c("Diesel", "Fuel", "Oil"),
options = layersControlOptions(collapsed = FALSE)) %>%
hideGroup("Diesel") %>% hideGroup("Fuel") %>% hideGroup("Oil")
noaamap
dieselclean <- diesel[!is.na(diesel$lat), ]
fuelclean <- fuel[!is.na(fuel$lat), ]
oilclean <- oil[!is.na(oil$lat), ]
noaamap <- leaflet() %>%
addTiles() %>%
addProviderTiles("CartoDB.Positron") %>%
setView(-95.37, 29.75, zoom = 11) %>%
addCircleMarkers(data = dieselclean, lng = ~ lon, lat = ~ lat, color="blue", radius = ~ sqrt(max_ptl_release_gallons), popup = paste("<strong>",name,"<strong><br/>",description, group="Diesel")) %>%
addCircleMarkers(data = fuelclean, lng = ~ lon, lat = ~ lat, color="red", radius = ~ sqrt(max_ptl_release_gallons), popup = paste("<strong>",name,"<strong><br/>",description, group="Fuel")) %>%
addCircleMarkers(data = oilclean, lng = ~ lon, lat = ~ lat, color="green", radius = ~ sqrt(max_ptl_release_gallons), popup = paste("<strong>",name,"<strong><br/>",description, group="Oil")) %>%
addLayersControl(overlayGroups = c("Diesel", "Fuel", "Oil"),
options = layersControlOptions(collapsed = FALSE)) %>%
hideGroup("Diesel") %>% hideGroup("Fuel") %>% hideGroup("Oil")
noaamap
noaamap <- leaflet() %>%
addTiles() %>%
addProviderTiles("CartoDB.Positron") %>%
setView(-95.37, 29.75, zoom = 11) %>%
addCircleMarkers(data = dieselclean, lng = ~ lon, lat = ~ lat, color="blue", radius = ~ sqrt(max_ptl_release_gallons), popup = paste("<strong>",name,"<strong><br/>",description, group="Diesel")) %>%
addCircleMarkers(data = fuelclean, lng = ~ lon, lat = ~ lat, color="red", radius = ~ sqrt(max_ptl_release_gallons), popup = paste("<strong>",name,"<strong><br/>",description, group="Fuel")) %>%
addCircleMarkers(data = oilclean, lng = ~ lon, lat = ~ lat, color="green", radius = ~ sqrt(max_ptl_release_gallons), popup = paste("<strong>",name,"<strong><br/>",description, group="Oil")) %>%
addLayersControl(overlayGroups = c("Diesel", "Fuel", "Oil"),
options = layersControlOptions(collapsed = FALSE)) %>%
hideGroup("Diesel") %>% hideGroup("Fuel") %>% hideGroup("Oil")
noaamap
noaamap <- leaflet() %>%
addTiles() %>%
addProviderTiles("CartoDB.Positron") %>%
setView(-95.37, 29.75, zoom = 11) %>%
addCircleMarkers(data = dieselclean, lng = ~ lon, lat = ~ lat, color="blue", radius = ~ sqrt(dieselclean$max_ptl_release_gallons), popup = paste("<strong>",dieselclean$name,"<strong><br/>",dieselclean$description, group="Diesel")) %>%
addCircleMarkers(data = fuelclean, lng = ~ lon, lat = ~ lat, color="red", radius = ~ sqrt(fuelclean$max_ptl_release_gallons), popup = paste("<strong>",fuelclean$name,"<strong><br/>",fuelclean$description, group="Fuel")) %>%
addCircleMarkers(data = oilclean, lng = ~ lon, lat = ~ lat, color="green", radius = ~ sqrt(oilclean$max_ptl_release_gallons), popup = paste("<strong>",oilclean$name,"<strong><br/>",oilclean$description, group="Oil")) %>%
addLayersControl(overlayGroups = c("Diesel", "Fuel", "Oil"),
options = layersControlOptions(collapsed = FALSE)) %>%
hideGroup("Diesel") %>% hideGroup("Fuel") %>% hideGroup("Oil")
noaamap
noaamap <- leaflet() %>%
addTiles() %>%
addProviderTiles("CartoDB.Positron") %>%
setView(-95.37, 29.75, zoom = 11) %>%
addCircleMarkers(data = dieselclean, lng = ~ lon, lat = ~ lat, color="blue", radius = ~ sqrt(dieselclean$max_ptl_release_gallons), popup = paste("<strong>",dieselclean$name,"<strong><br/>",dieselclean$description, group="Diesel")) %>%
addCircleMarkers(data = fuelclean, lng = ~ lon, lat = ~ lat, color="red", radius = ~ sqrt(fuelclean$max_ptl_release_gallons), popup = paste("<strong>",fuelclean$name,"<strong><br/>",fuelclean$description, group="Fuel")) %>%
addCircleMarkers(data = oilclean, lng = ~ lon, lat = ~ lat, color="green", radius = ~ sqrt(oilclean$max_ptl_release_gallons), popup = paste("<strong>",oilclean$name,"<strong><br/>",oilclean$description, group="Oil")) %>%
addLayersControl(overlayGroups = c("Diesel", "Fuel", "Oil"),
options = layersControlOptions(collapsed = FALSE)) %>%
hideGroup("Diesel") %>% hideGroup("Fuel") %>% hideGroup("Oil")
noaamap
library(dplyr)
library(leaflet)
setwd("/users/jeffreichman/noaa-incidents")
diesel <- read.csv(file="diesel.csv", header=T)
fuel <- read.csv(file="fuel.csv", header=T)
oil <- read.csv(file="oil.csv", header=T)
dieselclean <- diesel[!is.na(diesel$lat), ]
fuelclean <- fuel[!is.na(fuel$lat), ]
oilclean <- oil[!is.na(oil$lat), ]
View(fuelclean)
noaamap <- leaflet() %>%
addTiles() %>%
addProviderTiles("CartoDB.Positron") %>%
setView(-95.37, 29.75, zoom = 11) %>%
addCircleMarkers(data = dieselclean, lng = ~ lon, lat = ~ lat, color="blue", radius = ~ sqrt(dieselclean$max_ptl_release_gallons), popup = paste("<strong>",dieselclean$name,"<strong><br/>",dieselclean$description, group="Diesel")) %>%
addCircleMarkers(data = fuelclean, lng = ~ lon, lat = ~ lat, color="red", radius = ~ sqrt(fuelclean$max_ptl_release_gallons), popup = paste("<strong>",fuelclean$name,"<strong><br/>",fuelclean$description, group="Fuel")) %>%
addCircleMarkers(data = oilclean, lng = ~ lon, lat = ~ lat, color="green", radius = ~ sqrt(oilclean$max_ptl_release_gallons), popup = paste("<strong>",oilclean$name,"<strong><br/>",oilclean$description, group="Oil")) %>%
addLayersControl(overlayGroups = c("Diesel", "Fuel", "Oil"),
options = layersControlOptions(collapsed = FALSE)) %>%
hideGroup("Diesel") %>% hideGroup("Fuel") %>% hideGroup("Oil")
noaamap
